// functions.h
// Written by Matthew McDermott (U70910297)
// Contains the functions for project 4
//

#ifndef FUNCTIONS_H
#define FUNCTIONS_H

#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include <queue>

using namespace std;

/*Constant Variables*/
const int ALPHABET_SIZE = 26;

string getInfixExpression(const string& postFix);
void radixSort(vector<string>& numbers,
      const int& digitsPerNumber, const int& radix);
void displayVector(vector<string> vector1);
string convertNumber(string number, const int& base);

/**
 * getInfixExpression
 *
 * Precondition:    We have a string in postFix notation
 *                  that needs to be changed to infix notation.
 * Postcondition:   The string is returned in infix notation.
 */
string getInfixExpression(const string& postFix)
{
   stack<string> stackA;
   string right, left, temp, pushed;

   //check for empty string
   if (postFix.empty())
      return "This string is empty";

   //push operands onto stack and check for operators
   for (unsigned int i = 0; i < postFix.size(); ++i)
   {
      if(postFix[i]== '+' ||
         postFix[i]=='-'||
         postFix[i] == '*' ||
         postFix[i] == '/')
      {
         right = stackA.top() + ')';
         stackA.pop();
         left = '(' + stackA.top();
         stackA.pop();
         temp = left + postFix[i] + right;
         stackA.push(temp);
      }
      else
      {
         pushed = postFix[i];
         stackA.push(pushed);
      }
   }

   return stackA.top();
}

/*
 * Radix Sort
 *
 * PreConditions:   A vector must be sorted in ascending order
 * PostConditions:  The vector is sorted
 */
void radixSort(vector<string>& numbers,
      const int& digitsPerNumber, const int& radix)
{
   /*create a queue for each possible number that can be in a number*/
   vector<queue<string> > buckets(radix);
   vector<string>::iterator vectorIterator;
   int digitI;

   /*Check for empty numbers vector*/
   if (numbers.empty())
   {
      cout << "\nThis vector is empty. " << endl;
   }

   /*Iterate over the digits of each number, starting with the lsd*/
   for(int currentDigit = digitsPerNumber-1;
         currentDigit >= 0 ; --currentDigit)
   {

      /*Iterate over each the numbers in the vector and put them in a bucket
       * using an iterator*/
      for (vectorIterator = numbers.begin();
            vectorIterator != numbers.end();
            vectorIterator++)
      {
         /*Isolate the current digit*/
         string temp = *vectorIterator;
         int size = temp.size();
         if (size != digitsPerNumber) //checks for required padding
         {
            digitI = 0;
         }
         else
         {
            char holder = temp[currentDigit];
            digitI = holder - '0';
         }
         /*Push it into the proper bucket*/
         buckets[digitI].push(temp);

      }
      numbers.clear(); //clear the numbers vector

      /*Iterate over each of the buckets and pull out the numbers
       * to put them back into numbers
       */
      for (int i = 0; i < radix; ++i)
      {
         while (buckets[i].size() != 0)
         {

            string putBack = buckets[i].front();
            buckets[i].pop();
            numbers.push_back(putBack);
         }
      }
   }
}

/*
 * Function to display the contents of a vector
 *
 * Preconditions:   A vector exists that is not empty
 * Postconditions:  The contents of the vector are displayed
 */
void displayVector(vector<string> vector1)
{
   vector<string>::iterator displayIterator;
   for (displayIterator = vector1.begin();
         displayIterator != vector1.end(); ++displayIterator)
   {
      cout << *displayIterator << " ";
   }
   cout << endl;
}

string convertNumber(string number, const int& base)
{
   int digit = 0;
   int newNumber = 0;
   char alphabet[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M',
         'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};


   /*convert string number to an int*/
   for (int i = 0; i < base; ++i)
   {
      char character = number[i];
      if (character != 0|| character != 1 ||character != 2 ||
            character != 3 || character != 4 || character != 5 ||
            character != 6 || character != 7 || character != 8 ||
            character != 9)
      {
         for (int j = 0; j < ALPHABET_SIZE; ++j)
         {
            if (character == alphabet[j])
            {
               digit = j+10;
            }
         }
      }
      else
      {
         digit = character - '0';
      }
      newNumber += (digit*10)

   }





   return newNumber;
}

#endif
