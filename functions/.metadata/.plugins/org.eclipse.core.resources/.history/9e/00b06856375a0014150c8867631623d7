// functions.h
// Written by Matthew McDermott (U70910297)
// Contains the functions for project 4
//

#ifndef FUNCTIONS_H
#define FUNCTIONS_H

#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include <queue>

using namespace std;

string getInfixExpression(const string& postFix);
void radixSort(vector<string>& numbers, const int& digitsPerNumber, const int& radix);
int getDigit(const string number, const int position);


/**
 * getInfixExpression
 *
 * Precondition:    We have a string in postFix notation
 *                  that needs to be changed to infix notation.
 * Postcondition:   The string is returned in infix notation.
 */
string getInfixExpression(const string& postFix)
{
   stack<string> stackA;
   string right, left, temp, pushed;

   //check for empty string
   if (postFix.empty())
      return "This string is empty";

   //push operands onto stack and check for operators
   for (unsigned int i = 0; i < postFix.size(); ++i)
   {
      if(postFix[i]== '+' ||
         postFix[i]=='-'||
         postFix[i] == '*' ||
         postFix[i] == '/')
      {
         right = stackA.top() + ')';
         stackA.pop();
         left = '(' + stackA.top();
         stackA.pop();
         temp = left + postFix[i] + right;
         stackA.push(temp);
      }
      else
      {
         pushed = postFix[i];
         stackA.push(pushed);
      }
   }

   return stackA.top();
}


void radixSort(vector<string>& numbers, const int& digitsPerNumber, const int& radix)
{
   vector< queue<string> > buckets(radix);

   /*Passes through the digits starting at the least significant digit*/
   for (int digit = digitsPerNumber; digit > 0; --digit)
   {
      /*Iterate over each number in the vector and put them in a bucket*/
      for(unsigned int j = 0; j<numbers.size();++j)
      {
         int digitI = getDigit(numbers[j], digit);
         buckets[digitI].push(numbers[j]);
      }
      /*Iterate over each bucket and put strings back into numbers vector*/
      for(unsigned int k = 0; k < radix ; ++k)
      {
         buckets[k];
      }
   }
}

int getDigit(const string number, const int position)
{
   return number[position];
}


#endif
